# vim:syntax=python

import os
import platform
import subprocess
import sys

import lit


#
# Basic information about this test suite.
#
config.name = 'libpreopen'
config.suffixes = [ '.c' ]
config.excludes = [ 'Inputs' ]
config.test_format = lit.formats.ShTest()


def bootstrap_configuration(config):
	"""
	Find all of the configuration information that is normally supplied by
	CMake via a lit.site.cfg file.

	When lit is used to execute a single test (e.g., `lit ../../test/shm.c`),
	it may not find the lit.site.cfg file that has been generated by CMake to
	tell it where to find source directories, FileCheck, etc. This function
	attempts to find that information using path heuristics, environment
	variables, etc., in order to make the developer's life easier. To get
	deterministic behaviour (e.g., when doing continuous integration), you
	should just use the CMake-generated `check` target, i.e., `make check` or
	`ninja check`.
	"""

	# Find the 'test_support' module:
	config.source_root = os.getenv('LIBPREOPEN_SOURCE_DIR')
	if not config.source_root:
		if not 'source_dir' in lit_config.params:
			raise Exception, ('Unable to find LIBPREOPEN source directory.'
				+ ' Set LIBPREOPEN_SOURCE_DIR or pass'
				+ ' --param=source_dir=path/to/src to lit')

		config.source_root = lit_config.params['source_dir']

	sys.path.append(os.path.join(config.source_root, 'test'))

	try:
		import test_support as test

	except ImportError, e:
		print("Unable to find 'test_support' module in:\n[")
		for p in sys.path:
			print("  %s" % p)
		print("]")
		sys.exit(1)



	# Find tools to be used at test run time (C compiler, FileCheck, etc.):
	try:
		config.cc = test.which([ 'cc', 'clang', 'clang39', 'clang38' ])
		config.filecheck_path = test.which([ 'FileCheck' ])

	except ValueError, e:
		sys.stderr.write(e.message + '\n')
		sys.exit(1)


	# Test CFLAGS:
	extra_cflags = [ '-Wall', '-g' ]     # always build tests with debug symbols
	extra_cflags += [ '-I', os.path.join(config.source_root, 'include') ]

	config.cflags = test.cflags([ '%p/Inputs' ], extra = extra_cflags)


	# The built libpreopen library:
	config.build_root = os.getenv('LIBPREOPEN_BUILD_DIR')
	if not config.build_root:
		if not 'build_root' in lit_config.params:
			raise Exception, ('Unable to find LIBPREOPEN build directory;' +
				' set LIBPREOPEN_BUILD_DIR or pass --build_root to lit')

		config.build_root = lit_config.params['build_root']

	libdir = os.path.join(config.build_root, 'lib')
	config.environment['LD_LIBRARY_PATH'] = libdir
	config.ldflags = test.ldflags([ libdir ], [ 'preopen' ])
	config.library = test.find_library(test.libname('preopen'), [ libdir ])

	config.test_exec_root = os.path.join(config.build_root, 'test', 'Output')


#
# Do we have paths, etc., from a site-specific lit.site.cfg file or do we need
# to bootstrap such a configuration?
#
if hasattr(config, 'source_root'):
	pass

else:
	bootstrap_configuration(config)


#
# Set variables that we can access from lit RUN lines.
#
config.substitutions += [
	# Tools:
	('%cc', config.cc),
	('%filecheck', config.filecheck_path),

	# The library:
	('%lib', config.library),

	# Flags:
	('%cflags', config.cflags),
	('%ldflags', config.ldflags),
]
